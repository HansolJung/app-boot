<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="it.korea.app_boot.board.mapper.BoardMapper">

	<!-- mybatis 의 resultMap 정의 -->
	<!-- type 은 mybatis-config.xml 에서 alias 로 설정한 클래스의 별칭 -->
	<resultMap type="boardDetail" id="boardDetailMap">
		<id property="brdId" column="brd_id"/>
		<result property="title" column="title"/>
		<result property="writer" column="writer"/>
		<result property="contents" column="contents"/>
		<result property="readCount" column="read_count"/>
		<result property="likeCount" column="like_count"/>
		<result property="createDate" column="create_date"/>
		<result property="updateDate" column="update_date"/>
		
		<!-- 파일 리스트 매핑 -->
		<!-- 리스트로 매핑한다는 뜻인데 그 리스트의 이름은 files 로 설정 -->
		<!-- ofType 은 mybatis-config.xml 에서 alias 로 설정한 클래스의 별칭 -->
		<collection property="files" ofType="boardFiles">
			<id property="bfId" column="bf_id"/>
			<result property="fileName" column="file_name"/>
		</collection>
		
	</resultMap>

	<!-- 게시글 전체 개수 가져오기 -->
	<select id="getBoardTotal" resultType="int">
	
		select count(*) cnt
		from board
		
	</select>
	
	<!-- 게시글 리스트 가져오기 > 한 페이지당 보여줄 리스트 -->
	<select id="getBoardList" parameterType="searchDTO" resultType="boardRes">
	
		select *
		from (
			select brd_id,
				title,
				writer,
				read_count,
				like_count,
				if(update_date is null, create_date, update_date) as modified_date
			from board
		) b
		order by ${orderStr} <!-- 내부에서 만든 안전한 것만 ${} 기호로 사용 -->
		limit #{offSet}, #{count}
		
	</select>
	
	<!-- 게시글 상세 가져오기 -->
	<!-- resultType 은 클래스를 직접 사용할때 쓰고, resultMap 은 mybatis 의 resultMap 을 사용할때 쓴다 -->
	<select id="getBoard" parameterType="map" resultMap="boardDetailMap">
	
		select b.brd_id,
			   b.title,
			   b.contents,
			   b.writer,
			   b.read_count,
			   b.like_count,
			   b.create_date,
			   b.update_date,
			   bf.bf_id,
			   bf.file_name
		from board b
			left join board_files bf on b.brd_id = bf.brd_id
		where b.brd_id = #{brdId}
	
	</select>
	
	<!-- 게시글 파일 가져오기 -->
	<select id="getBoardFiles" parameterType="map" resultType="boardFiles">
	
		select bf_id,
			   file_name,
			   stored_name,
			   file_path
		from board_files
		where bf_id = #{bfId}
	
	</select>
	
	
	<!-- useGeneratedKeys : 자동 생성되는 키를 사용하는지 여부
		 keyProperty : 그 키가 무엇인지	
	 -->
	<insert id="insertBoard" parameterType="boardReq" useGeneratedKeys="true" keyProperty="brdId">
	
		insert into board(title, contents, writer)
		values (#{title}, #{contents}, #{writer})
		
	</insert>
	
	<insert id="insertBoardFiles" parameterType="boardFiles">
	
		insert into board_files(brd_id, file_name, stored_name, file_path, file_size)
		values (#{brdId}, #{fileName}, #{storedName}, #{filePath}, #{fileSize})
		
	</insert>
	
	<update id="updateLikeCount" parameterType="map">
		
		update board
		set like_count = #{likeCount}
		where brd_id = #{brdId}
		
	</update>
	
	<update id="updateReadCount" parameterType="map">
		
		update board
		set read_count = #{readCount}
		where brd_id = #{brdId}
		
	</update>
	
	<update id="updateBoard"  parameterType="boardDetail">
 
   		update board
   		<set>
      		<if test="title neq null and  title neq ''">
          		title = #{title},
      		</if>
      
      		<if test="contents neq null and  contents neq ''">
          		contents = #{contents},
      		</if>
      		update_date = now()
   		</set>
   		where brd_id = #{brdId}

 	</update>
 
 
	<delete id ="deleteBoard"   parameterType="map" >
		
		delete from board 
		where brd_id = #{brdId}
		
	</delete>
	 
	<delete id ="deleteBoardFile"   parameterType="map" >
	
		delete from board_files  
		where bf_id = #{bfId}
		
	</delete>
	 
	<delete id ="deleteAllBoardFiles"   parameterType="map" >
	
		delete from board_files  
		where brd_id = #{brdId}
		
	</delete>
	
</mapper>